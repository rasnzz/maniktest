import telebot
from telebot import types
import sqlite3
import datetime
import re
import threading
import time
import openpyxl
from openpyxl import Workbook
import os
import gspread
from google.oauth2.service_account import Credentials
import pytz
import logging
from dotenv import load_dotenv
import json

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.py
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_IDS = json.loads(os.getenv("ADMIN_CHAT_IDS", "[]"))
WORK_START = int(os.getenv("WORK_START", 9))
WORK_END = int(os.getenv("WORK_END", 19))
TIME_SLOT_STEP = int(os.getenv("TIME_SLOT_STEP", 60))
MIN_BOOKING_TIME = int(os.getenv("MIN_BOOKING_TIME", 60))
GOOGLE_SHEET_ID = os.getenv("GOOGLE_SHEET_ID")
GOOGLE_SHEET_NAME = os.getenv("GOOGLE_SHEET_NAME", "K1")
SALON_ADDRESS = os.getenv("SALON_ADDRESS", "—É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 123")
SALON_PHONE = os.getenv("SALON_PHONE", "+7 (3532) 123-456")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='bot.log',
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –û—Ä–µ–Ω–±—É—Ä–≥–∞ (UTC+5)
ORENBURG_TZ = pytz.timezone('Asia/Yekaterinburg')

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_STATE = {}

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_db_connection():
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
    return sqlite3.connect('salon.db', timeout=10)

def get_masters():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤ –∏–∑ –ë–î"""
    try:
        with get_db_connection() as conn:
            c = conn.cursor()
            c.execute("SELECT id, name FROM masters")
            return c.fetchall()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–æ–≤: {e}")
        return []

def get_services():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –∏–∑ –ë–î"""
    try:
        with get_db_connection() as conn:
            c = conn.cursor()
            c.execute("SELECT id, name, duration, price FROM services")
            return c.fetchall()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥: {e}")
        return []

def save_appointment(chat_id, state):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –ë–î"""
    try:
        with get_db_connection() as conn:
            c = conn.cursor()
            c.execute('''INSERT INTO appointments 
                        (client_id, client_name, phone, master_id, service_id, date, time) 
                        VALUES (?, ?, ?, ?, ?, ?, ?)''',
                    (chat_id, state['client_name'], state['phone'], 
                     state['master_id'], state['service_id'], state['date'], state['time']))
            conn.commit()
            return c.lastrowid
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
        return None

# --- Google Sheets Integration ---
def get_google_sheet():
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ"""
    try:
        scope = [
            'https://www.googleapis.com/auth/spreadsheets',
            'https://www.googleapis.com/auth/drive'
        ]
        
        creds = Credentials.from_service_account_file(
            'credentials.json',
            scopes=scope
        )
        
        client = gspread.authorize(creds)
        sheet = client.open_by_key(GOOGLE_SHEET_ID)
        return sheet.worksheet(GOOGLE_SHEET_NAME)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google Sheets: {e}")
        return None

def init_google_sheet():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        worksheet = get_google_sheet()
        if not worksheet:
            return
            
        headers = [
            "ID", "–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏", "–í—Ä–µ–º—è", "–ö–ª–∏–µ–Ω—Ç", "–¢–µ–ª–µ—Ñ–æ–Ω",
            "–ú–∞—Å—Ç–µ—Ä", "–£—Å–ª—É–≥–∞", "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–¶–µ–Ω–∞", "–°—Ç–∞—Ç—É—Å"
        ]
        worksheet.clear()
        worksheet.append_row(headers)
        logger.info("Google Sheet –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheet: {e}")

def update_google_sheet(appointment_id, action="add"):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç Google Sheets –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö"""
    try:
        worksheet = get_google_sheet()
        if not worksheet:
            return
            
        with get_db_connection() as conn:
            c = conn.cursor()
            c.execute("""SELECT 
                        a.id, a.date, a.time, a.client_name, a.phone,
                        m.name, s.name, s.duration, s.price, a.status
                        FROM appointments a
                        JOIN masters m ON a.master_id = m.id
                        JOIN services s ON a.service_id = s.id
                        WHERE a.id = ?""", (appointment_id,))
            appointment = c.fetchone()
        
        if not appointment:
            return
        
        row = list(appointment)
        row[1] = datetime.datetime.strptime(row[1], '%Y-%m-%d').strftime('%d.%m.%Y')
        
        if action == "add":
            worksheet.append_row(row)
        elif action == "update":
            cell = worksheet.find(str(appointment_id))
            if cell:
                for i, value in enumerate(row, start=1):
                    worksheet.update_cell(cell.row, i, value)
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Google Sheet: {e}")

def sync_all_to_google():
    """–ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets"""
    try:
        worksheet = get_google_sheet()
        if not worksheet:
            return
            
        worksheet.clear()
        headers = [
            "ID", "–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏", "–í—Ä–µ–º—è", "–ö–ª–∏–µ–Ω—Ç", "–¢–µ–ª–µ—Ñ–æ–Ω",
            "–ú–∞—Å—Ç–µ—Ä", "–£—Å–ª—É–≥–∞", "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–¶–µ–Ω–∞", "–°—Ç–∞—Ç—É—Å"
        ]
        worksheet.append_row(headers)
        
        with get_db_connection() as conn:
            c = conn.cursor()
            c.execute("""SELECT 
                        a.id, a.date, a.time, a.client_name, a.phone,
                        m.name, s.name, s.duration, s.price, a.status
                        FROM appointments a
                        JOIN masters m ON a.master_id = m.id
                        JOIN services s ON a.service_id = s.id""")
            appointments = c.fetchall()
        
        batch = []
        for app in appointments:
            row = list(app)
            row[1] = datetime.datetime.strptime(row[1], '%Y-%m-%d').strftime('%d.%m.%Y')
            batch.append(row)
        
        if batch:
            worksheet.append_rows(batch)
        
        logger.info("–ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

# --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
def send_reminders():
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    while True:
        try:
            # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –û—Ä–µ–Ω–±—É—Ä–≥–µ
            now = datetime.datetime.now(ORENBURG_TZ)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            tomorrow = now + datetime.timedelta(days=1)
            date_str = tomorrow.strftime("%Y-%m-%d")
            send_day_reminders(date_str, "–∑–∞–≤—Ç—Ä–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–µ—Å–ª–∏ —Å–µ–π—á–∞—Å —É—Ç—Ä–æ)
            if now.hour < 10:  # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å —É—Ç—Ä–æ (–¥–æ 10:00)
                today_str = now.strftime("%Y-%m-%d")
                send_day_reminders(today_str, "—Å–µ–≥–æ–¥–Ω—è")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 1 —á–∞—Å
            time.sleep(3600)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            time.sleep(60)

def send_day_reminders(date_str, day_text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å"""
    try:
        with get_db_connection() as conn:
            c = conn.cursor()
            c.execute("""SELECT 
                        a.id, a.client_id, a.client_name, a.time,
                        m.name, s.name
                        FROM appointments a
                        JOIN masters m ON a.master_id = m.id
                        JOIN services s ON a.service_id = s.id
                        WHERE a.date = ? AND a.status = 'active'""", (date_str,))
            appointments = c.fetchall()
        
        for app in appointments:
            app_id, client_id, client_name, app_time, master_name, service_name = app
            message = (
                f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏!\n\n"
                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {client_name}!\n"
                f"{day_text.capitalize()} –≤ {app_time} —É –≤–∞—Å –∑–∞–ø–∏—Å—å –∫ –º–∞—Å—Ç–µ—Ä—É {master_name}\n"
                f"–£—Å–ª—É–≥–∞: {service_name}\n\n"
                f"üìç –ê–¥—Ä–µ—Å: {SALON_ADDRESS}\n"
                f"üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã: {SALON_PHONE}\n\n"
                f"–ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–π—Ç–∏, –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ú–æ–∏ –∑–∞–ø–∏—Å–∏'"
            )
            try:
                bot.send_message(client_id, message)
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É {client_id}")
                
            except Exception as e:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –ø–æ–º–µ—á–∞–µ–º –∑–∞–ø–∏—Å—å
                if "bot was blocked" in str(e).lower():
                    logger.warning(f"–ö–ª–∏–µ–Ω—Ç {client_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –æ—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å—å")
                    with get_db_connection() as conn:
                        c = conn.cursor()
                        c.execute("UPDATE appointments SET status='canceled' WHERE id=?", (app_id,))
                        conn.commit()
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {client_id}: {e}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ {date_str}: {e}")

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞ ---
def show_main_menu(chat_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è'))
    markup.add(types.KeyboardButton('üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏'))
    markup.add(types.KeyboardButton('‚ÑπÔ∏è –û —Å–∞–ª–æ–Ω–µ'))
    
    bot.send_message(
        chat_id,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )

@bot.message_handler(commands=['start'])
def start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    show_main_menu(message.chat.id)

@bot.message_handler(func=lambda message: message.text == '‚ÑπÔ∏è –û —Å–∞–ª–æ–Ω–µ')
def about_salon(message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∞–ª–æ–Ω–µ"""
    text = (
        f"üíà –ù–∞—à —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã\n\n"
        f"üïí –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: {WORK_START}:00 - {WORK_END}:00\n"
        f"üìç –ê–¥—Ä–µ—Å: {SALON_ADDRESS}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {SALON_PHONE}\n\n"
        f"–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä —É—Å–ª—É–≥ –ø–æ —É—Ö–æ–¥—É –∑–∞ –Ω–æ–≥—Ç—è–º–∏ –∏ –∫–æ–∂–µ–π —Ä—É–∫. "
        f"–ù–∞—à–∏ –º–∞—Å—Ç–µ—Ä–∞ - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—ã —Å –±–æ–ª—å—à–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã."
    )
    bot.send_message(message.chat.id, text)

@bot.message_handler(func=lambda message: message.text == 'üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è')
def start_booking(message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–∏—Å–∏"""
    show_masters(message.chat.id)

def show_masters(chat_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤"""
    try:
        masters = get_masters()
        if not masters:
            bot.send_message(chat_id, "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤")
            return
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for master_id, name in masters:
            markup.add(types.KeyboardButton(f"–ú–∞—Å—Ç–µ—Ä {name}"))
        
        markup.add(types.KeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥'))
        bot.send_message(chat_id, "üë©‚Äçüé® –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:", reply_markup=markup)
        USER_STATE[chat_id] = {'step': 'select_master'}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–∞—Å—Ç–µ—Ä–æ–≤: {e}")
        bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(func=lambda message: message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥')
def back_to_main(message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    show_main_menu(message.chat.id)

@bot.message_handler(func=lambda message: USER_STATE.get(message.chat.id, {}).get('step') == 'select_master')
def select_master(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–∞—Å—Ç–µ—Ä–∞"""
    try:
        if message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            show_main_menu(message.chat.id)
            return
            
        masters = get_masters()
        selected = None
        
        for master_id, name in masters:
            if f"–ú–∞—Å—Ç–µ—Ä {name}" in message.text:
                selected = (master_id, name)
                break
        
        if selected:
            USER_STATE[message.chat.id] = {
                'step': 'select_service',
                'master_id': selected[0],
                'master_name': selected[1]
            }
            show_services(message.chat.id)
        else:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞")
            show_masters(message.chat.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Å—Ç–µ—Ä–∞: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def show_services(chat_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥"""
    try:
        services = get_services()
        if not services:
            bot.send_message(chat_id, "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥")
            return
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for service_id, name, duration, price in services:
            hours = duration // 60
            minutes = duration % 60
            duration_str = f"{hours}—á {minutes}–º–∏–Ω" if hours else f"{minutes}–º–∏–Ω"
            markup.add(types.KeyboardButton(f"{name} ({duration_str}) - {price}‚ÇΩ"))
        
        markup.add(types.KeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥'))
        bot.send_message(chat_id, "üíÖ –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É—Å–ª—É–≥: {e}")
        bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(func=lambda message: USER_STATE.get(message.chat.id, {}).get('step') == 'select_service')
def select_service(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —É—Å–ª—É–≥–∏"""
    try:
        if message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            show_masters(message.chat.id)
            return
            
        services = get_services()
        selected = None
        
        for service_id, name, duration, price in services:
            if name in message.text:
                selected = (service_id, name, duration, price)
                break
        
        if selected:
            USER_STATE[message.chat.id].update({
                'step': 'get_name',
                'service_id': selected[0],
                'service_name': selected[1],
                'duration': selected[2],
                'price': selected[3]
            })
            bot.send_message(
                message.chat.id, 
                "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
                reply_markup=types.ReplyKeyboardRemove()
            )
        else:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞")
            show_services(message.chat.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@bot.message_handler(func=lambda message: USER_STATE.get(message.chat.id, {}).get('step') == 'get_name')
def get_client_name(message):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        name = message.text.strip()
        if name and 2 <= len(name) <= 50:
            USER_STATE[message.chat.id]['client_name'] = name
            USER_STATE[message.chat.id]['step'] = 'get_phone'
            bot.send_message(
                message.chat.id, 
                "üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω (–ø—Ä–∏–º–µ—Ä: +79161234567):"
            )
        else:
            bot.send_message(message.chat.id, "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@bot.message_handler(func=lambda message: USER_STATE.get(message.chat.id, {}).get('step') == 'get_phone')
def get_client_phone(message):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        phone = message.text.strip()
        cleaned_phone = re.sub(r'\D', '', phone)  # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞
        if len(cleaned_phone) == 11 and cleaned_phone.startswith(('7', '8')):
            formatted_phone = f"+7{cleaned_phone[1:]}"
            USER_STATE[message.chat.id]['phone'] = formatted_phone
            USER_STATE[message.chat.id]['step'] = 'select_date'
            show_calendar(message.chat.id)
        else:
            bot.send_message(
                message.chat.id, 
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü—Ä–∏–º–µ—Ä: +79161234567 –∏–ª–∏ 89161234567\n" 
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –µ—â–µ —Ä–∞–∑:"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def show_calendar(chat_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ 7 –¥–Ω–µ–π"""
    try:
        today = datetime.datetime.now(ORENBURG_TZ).date()
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=7)
        
        for i in range(7):
            date = today + datetime.timedelta(days=i)
            btn_text = date.strftime("%d.%m")
            markup.add(types.KeyboardButton(btn_text))
        
        markup.add(types.KeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥'))
        bot.send_message(chat_id, "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=markup)
        USER_STATE[chat_id]['step'] = 'select_date'
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(func=lambda message: USER_STATE.get(message.chat.id, {}).get('step') == 'select_date')
def select_date(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã"""
    try:
        if message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            show_services(message.chat.id)
            return
            
        day, month = map(int, message.text.split('.'))
        now = datetime.datetime.now(ORENBURG_TZ)
        today = now.date()
        year = today.year
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–ª–∞ –ª–∏ –¥–∞—Ç–∞ –≤ —ç—Ç–æ–º –≥–æ–¥—É
        try:
            selected_date = datetime.date(year, month, day)
        except ValueError:
            selected_date = None
        
        # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
        if not selected_date or selected_date < today:
            try:
                selected_date = datetime.date(year + 1, month, day)
            except ValueError:
                selected_date = None
        
        if selected_date and selected_date >= today:
            USER_STATE[message.chat.id]['date'] = selected_date.strftime("%Y-%m-%d")
            USER_STATE[message.chat.id]['step'] = 'select_time'
            show_time_slots(message.chat.id)
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú")
            show_calendar(message.chat.id)
    except:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú")
        show_calendar(message.chat.id)

def show_time_slots(chat_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        state = USER_STATE[chat_id]
        master_id = state['master_id']
        selected_date = state['date']
        service_duration = state['duration']
        
        # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –û—Ä–µ–Ω–±—É—Ä–≥–µ
        now = datetime.datetime.now(ORENBURG_TZ)
        today = now.date()
        selected_date_obj = datetime.datetime.strptime(selected_date, '%Y-%m-%d').date()
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã –∏–∑ –ë–î
        with get_db_connection() as conn:
            c = conn.cursor()
            c.execute("""SELECT a.time, s.duration 
                       FROM appointments a
                       JOIN services s ON a.service_id = s.id
                       WHERE master_id=? AND date=? AND status='active'""", 
                     (master_id, selected_date))
            booked_slots = c.fetchall()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
        available_slots = []
        current_time = datetime.time(WORK_START, 0)
        end_time = datetime.time(WORK_END, 0)
        
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ + –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if selected_date_obj == today:
            min_time = (now + datetime.timedelta(minutes=MIN_BOOKING_TIME)).time()
            if min_time > current_time:
                current_time = min_time
        
        while current_time < end_time:
            slot_str = current_time.strftime("%H:%M")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—Å–ª—É–≥–∏
            current_dt = datetime.datetime.combine(datetime.date.today(), current_time)
            end_service_dt = current_dt + datetime.timedelta(minutes=service_duration)
            end_service_time = end_service_dt.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å–ª—É–≥–∞ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
            if end_service_time > end_time:
                current_time = (current_dt + datetime.timedelta(minutes=TIME_SLOT_STEP)).time()
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –∑–∞–Ω—è—Ç—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
            slot_free = True
            for booked_time, booked_duration in booked_slots:
                booked_time = datetime.datetime.strptime(booked_time, "%H:%M").time()
                booked_end_dt = datetime.datetime.combine(datetime.date.today(), booked_time) + datetime.timedelta(minutes=booked_duration)
                booked_end_time = booked_end_dt.time()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
                if not (end_service_time <= booked_time or current_time >= booked_end_time):
                    slot_free = False
                    break
            
            if slot_free:
                available_slots.append(slot_str)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ—Ç—É
            current_time = (current_dt + datetime.timedelta(minutes=TIME_SLOT_STEP)).time()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
        for time_slot in available_slots:
            markup.add(types.KeyboardButton(time_slot))
        
        markup.add(types.KeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥'))
        
        if available_slots:
            bot.send_message(chat_id, "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=markup)
        else:
            bot.send_message(chat_id, "üò¢ –ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
            show_calendar(chat_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ª–æ—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")

@bot.message_handler(func=lambda message: USER_STATE.get(message.chat.id, {}).get('step') == 'select_time')
def select_time(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        if message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            show_calendar(message.chat.id)
            return
            
        time_str = message.text
        if re.match(r'^\d{1,2}:\d{2}$', time_str):
            USER_STATE[message.chat.id]['time'] = time_str
            confirm_booking(message.chat.id)
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")
            show_time_slots(message.chat.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def confirm_booking(chat_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    try:
        state = USER_STATE[chat_id]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        date_obj = datetime.datetime.strptime(state['date'], '%Y-%m-%d')
        formatted_date = date_obj.strftime('%d.%m.%Y')
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –Ω–æ–º–µ—Ä–∞ –∑–∞–ø–∏—Å–∏
        text = (
            f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å:\n\n"
            f"üë©‚Äçüé® –ú–∞—Å—Ç–µ—Ä: {state['master_name']}\n"
            f"üíÖ –£—Å–ª—É–≥–∞: {state['service_name']} - {state['price']}‚ÇΩ\n"
            f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {state['duration']} –º–∏–Ω\n"
            f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
            f"‚è∞ –í—Ä–µ–º—è: {state['time']}\n"
            f"üë§ –ò–º—è: {state['client_name']}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {state['phone']}"
        )
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('–î–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é'))
        markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å'))
        
        bot.send_message(chat_id, text, reply_markup=markup)
        USER_STATE[chat_id]['step'] = 'confirmation'
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
        bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@bot.message_handler(func=lambda message: USER_STATE.get(message.chat.id, {}).get('step') == 'confirmation')
def finalize_booking(message):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        chat_id = message.chat.id
        
        if message.text == '–î–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é':
            appointment_id = save_appointment(chat_id, USER_STATE[chat_id])
            
            if appointment_id:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                bot.send_message(
                    chat_id, 
                    "üéâ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ñ–¥–µ–º –≤–∞—Å –≤ —Å–∞–ª–æ–Ω–µ.",
                    reply_markup=types.ReplyKeyboardRemove()
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
                state = USER_STATE[chat_id]
                admin_msg = (
                    f"üìù –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å! (#{appointment_id})\n"
                    f"üë§ –ö–ª–∏–µ–Ω—Ç: {state['client_name']}\n"
                    f"üì± –¢–µ–ª: {state['phone']}\n"
                    f"üë©‚Äçüé® –ú–∞—Å—Ç–µ—Ä: {state['master_name']}\n"
                    f"üíÖ –£—Å–ª—É–≥–∞: {state['service_name']}\n"
                    f"üìÖ {state['date']} {state['time']}"
                )
                
                for admin_id in ADMIN_CHAT_IDS:
                    try:
                        bot.send_message(admin_id, admin_msg)
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º Google Sheets
                update_google_sheet(appointment_id, "add")
            else:
                bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏")
        else:
            bot.send_message(chat_id, "‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=types.ReplyKeyboardRemove())
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if chat_id in USER_STATE:
            del USER_STATE[chat_id]
            
        # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        show_main_menu(chat_id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
        bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        show_main_menu(chat_id)

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ –æ—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ---
@bot.message_handler(func=lambda message: message.text == 'üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏')
def view_my_bookings(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ—Ä—è–¥–∫–æ–≤—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏"""
    try:
        with get_db_connection() as conn:
            c = conn.cursor()
            c.execute('''SELECT 
                        a.id, a.date, a.time, m.name, s.name 
                        FROM appointments a
                        JOIN masters m ON a.master_id = m.id
                        JOIN services s ON a.service_id = s.id
                        WHERE a.client_id = ? AND a.status = 'active'
                        ORDER BY a.date, a.time''',
                    (message.chat.id,))
            bookings = c.fetchall()
        
        if not bookings:
            bot.send_message(message.chat.id, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
            return
        
        response = "üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏:\n\n"
        markup = types.InlineKeyboardMarkup()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –≤–º–µ—Å—Ç–æ ID –∑–∞–ø–∏—Å–∏
        for idx, booking in enumerate(bookings, 1):
            app_id, date, time, master, service = booking
            date_formatted = datetime.datetime.strptime(date, '%Y-%m-%d').strftime('%d.%m.%Y')
            
            response += (
                f"üîπ <b>–ó–∞–ø–∏—Å—å #{idx}</b>\n"
                f"‚è∞ {date_formatted} –≤ {time}\n"
                f"üë©‚Äçüé® –ú–∞—Å—Ç–µ—Ä: {master}\n"
                f"üíÖ –£—Å–ª—É–≥–∞: {service}\n"
                f"‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
            )
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –∑–∞–ø–∏—Å–∏ –≤ callback_data
            markup.add(types.InlineKeyboardButton(
                text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å #{idx}",
                callback_data=f"cancel_{app_id}"
            ))
        
        bot.send_message(
            message.chat.id, 
            response, 
            reply_markup=markup,
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('cancel_'))
def cancel_booking_callback(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–æ–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –∑–∞–ø–∏—Å–∏ –∏–∑ callback_data
        appointment_id = call.data.split('_')[1]
        chat_id = call.message.chat.id
        
        with get_db_connection() as conn:
            c = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏
            c.execute("SELECT id, date, time FROM appointments WHERE id=? AND client_id=?", 
                      (appointment_id, chat_id))
            appointment = c.fetchone()
            
            if not appointment:
                bot.answer_callback_query(call.id, "‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º")
                return
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏
            c.execute("UPDATE appointments SET status='canceled' WHERE id=?", (appointment_id,))
            conn.commit()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º Google Sheets
            update_google_sheet(appointment_id, "update")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            app_id, date, time = appointment
            date_formatted = datetime.datetime.strptime(date, '%Y-%m-%d').strftime('%d.%m.%Y')
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –Ω–æ–º–µ—Ä–∞ –∑–∞–ø–∏—Å–∏)
            bot.answer_callback_query(call.id, "‚úÖ –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞")
            bot.send_message(
                chat_id, 
                f"‚ùå –í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ {date_formatted} –≤ {time} –æ—Ç–º–µ–Ω–µ–Ω–∞"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            for admin_id in ADMIN_CHAT_IDS:
                try:
                    bot.send_message(
                        admin_id, 
                        f"‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å #{appointment_id}\n"
                        f"–î–∞—Ç–∞: {date} {time}\n"
                        f"ID –∫–ª–∏–µ–Ω—Ç–∞: {chat_id}"
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
            view_my_bookings(call.message)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏")

# --- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ---
@bot.message_handler(commands=['admin'])
def admin_panel(message):
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if message.chat.id not in ADMIN_CHAT_IDS:
        bot.send_message(message.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏')
    btn2 = types.KeyboardButton('–í—Å–µ –∑–∞–ø–∏—Å–∏')
    btn3 = types.KeyboardButton('–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel')
    btn4 = types.KeyboardButton('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å Google')
    markup.add(btn1, btn2, btn3, btn4)
    bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=markup)

def get_appointments(status='active'):
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î"""
    try:
        with get_db_connection() as conn:
            c = conn.cursor()
            if status == 'all':
                c.execute("""SELECT 
                            a.id, a.client_name, a.phone, 
                            m.name, s.name, a.date, a.time 
                            FROM appointments a
                            JOIN masters m ON a.master_id = m.id
                            JOIN services s ON a.service_id = s.id
                            ORDER BY a.date, a.time""")
            else:
                c.execute("""SELECT 
                            a.id, a.client_name, a.phone, 
                            m.name, s.name, a.date, a.time 
                            FROM appointments a
                            JOIN masters m ON a.master_id = m.id
                            JOIN services s ON a.service_id = s.id
                            WHERE a.status = 'active'
                            ORDER BY a.date, a.time""")
            return c.fetchall()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π: {e}")
        return []

@bot.message_handler(func=lambda message: message.text == '–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏' and message.chat.id in ADMIN_CHAT_IDS)
def show_active_appointments(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏"""
    appointments = get_appointments()
    
    if not appointments:
        bot.send_message(message.chat.id, "–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç")
        return
    
    response = "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏:\n\n"
    for app in appointments:
        app_id, client_name, phone, master_name, service_name, date, time = app
        date_formatted = datetime.datetime.strptime(date, '%Y-%m-%d').strftime('%d.%m.%Y')
        response += (
            f"üîπ #{app_id}\n"
            f"üë§ {client_name} | üì± {phone}\n"
            f"üë©‚Äçüé® –ú–∞—Å—Ç–µ—Ä: {master_name}\n"
            f"üíÖ –£—Å–ª—É–≥–∞: {service_name}\n"
            f"‚è∞ {date_formatted} –≤ {time}\n"
            f"‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
        )
    
    bot.send_message(message.chat.id, response)

@bot.message_handler(func=lambda message: message.text == '–í—Å–µ –∑–∞–ø–∏—Å–∏' and message.chat.id in ADMIN_CHAT_IDS)
def show_all_appointments(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏"""
    appointments = get_appointments('all')
    
    if not appointments:
        bot.send_message(message.chat.id, "–ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç")
        return
    
    response = "üìã –í—Å–µ –∑–∞–ø–∏—Å–∏:\n\n"
    for app in appointments:
        app_id, client_name, phone, master_name, service_name, date, time = app
        date_formatted = datetime.datetime.strptime(date, '%Y-%m-%d').strftime('%d.%m.%Y')
        response += (
            f"üîπ #{app_id}\n"
            f"üë§ {client_name} | üì± {phone}\n"
            f"üë©‚Äçüé® –ú–∞—Å—Ç–µ—Ä: {master_name}\n"
            f"üíÖ –£—Å–ª—É–≥–∞: {service_name}\n"
            f"‚è∞ {date_formatted} –≤ {time}\n"
            f"‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
        )
    
    bot.send_message(message.chat.id, response)

@bot.message_handler(func=lambda message: message.text == '–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel' and message.chat.id in ADMIN_CHAT_IDS)
def export_to_excel(message):
    """–≠–∫—Å–ø–æ—Ä—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ Excel"""
    appointments = get_appointments('all')
    
    if not appointments:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        return
    
    try:
        wb = Workbook()
        ws = wb.active
        ws.title = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
        
        headers = ["ID", "–î–∞—Ç–∞", "–í—Ä–µ–º—è", "–ö–ª–∏–µ–Ω—Ç", "–¢–µ–ª–µ—Ñ–æ–Ω", "–ú–∞—Å—Ç–µ—Ä", "–£—Å–ª—É–≥–∞"]
        ws.append(headers)
        
        for app in appointments:
            app_id, client_name, phone, master_name, service_name, date, time = app
            date_formatted = datetime.datetime.strptime(date, '%Y-%m-%d').strftime('%d.%m.%Y')
            ws.append([app_id, date_formatted, time, client_name, phone, master_name, service_name])
        
        for col in range(1, len(headers) + 1):
            cell = ws.cell(row=1, column=col)
            cell.font = openpyxl.styles.Font(bold=True)
        
        for col in ws.columns:
            max_length = 0
            column = col[0].column_letter
            for cell in col:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = (max_length + 2)
            ws.column_dimensions[column].width = adjusted_width
        
        filename = f"schedule_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        wb.save(filename)
        
        with open(filename, 'rb') as file:
            bot.send_document(message.chat.id, file, caption="üìä –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π")
        
        os.remove(filename)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel: {e}")
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}")

@bot.message_handler(func=lambda message: message.text == '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å Google' and message.chat.id in ADMIN_CHAT_IDS)
def sync_google_sheet(message):
    """–†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets"""
    try:
        sync_all_to_google()
        bot.send_message(message.chat.id, "‚úÖ Google Sheets —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets: {e}")
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}")

@bot.message_handler(func=lambda message: message.text.startswith('/cancel_') and message.chat.id in ADMIN_CHAT_IDS)
def cancel_appointment(message):
    """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ ID"""
    try:
        appointment_id = message.text.split('_')[1]
        with get_db_connection() as conn:
            c = conn.cursor()
            c.execute("UPDATE appointments SET status='canceled' WHERE id=?", (appointment_id,))
            conn.commit()
            
            c.execute("SELECT client_id, date, time FROM appointments WHERE id=?", (appointment_id,))
            result = c.fetchone()
        
        if result:
            client_id, date, time = result
            # –û–±–Ω–æ–≤–ª—è–µ–º Google Sheets
            update_google_sheet(appointment_id, "update")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            date_formatted = datetime.datetime.strptime(date, '%Y-%m-%d').strftime('%d.%m.%Y')
            bot.send_message(
                client_id, 
                f"‚ùó –í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ {date_formatted} –≤ {time} –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
            )
        
        bot.send_message(message.chat.id, f"‚úÖ –ó–∞–ø–∏—Å—å #{appointment_id} –æ—Ç–º–µ–Ω–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /cancel_ID")

# --- –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ---
def background_sync():
    """–§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç"""
    while True:
        try:
            sync_all_to_google()
            time.sleep(600)  # 10 –º–∏–Ω—É—Ç
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            time.sleep(60)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    from database import init_db
    init_db()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets
    try:
        init_google_sheet()
        sync_all_to_google()
        logger.info("Google Sheets –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏
    threading.Thread(target=send_reminders, daemon=True).start()
    threading.Thread(target=background_sync, daemon=True).start()
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()